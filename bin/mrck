#!/usr/bin/perl

# mrck - Hacky script to check .mrconfig entries against git remotes.

use strict;

# Change this folder to the subdirectory where you keep your source code.
my $codeFolder = 'code';

my $home = $ENV{'HOME'};

# harvest list of git repositories from mr config file
my %repos = ();
my @lines = `mrls`;
for my $line (@lines) {
	chomp $line;
	my ($dir, $repo) = split(/\t/, $line, 2);
	$repos{$dir} = $repo;
}

# compare each git repo from mrconfig with the clone's actual origin remote
my $errors = 0;
for my $dir (keys %repos) {
	my $repo = $repos{$dir};
	if (not -d "$home/$dir") {
		# skip uninitialized directory
		print "[WARNING] $dir: uninitialized\n";
		next;
	}
	# extract repository source URL
	my $remote = '';
	if (-d "$home/$dir/.git") {
		$remote = `cd "$home/$dir" && git remote -v | grep '^origin.*(fetch)\$'`;
		chop $remote;
		$remote =~ s/^origin\s+(.*)\s+\(fetch\)$/$1/;
		if ($remote eq '') {
			# Try git-svn.
			$remote = `cd "$home/$dir" && git svn info --url 2> /dev/null`;
			chop $remote;
		}
	}
	elsif (-d "$home/$dir/.hg") {
		$remote = `cd "$home/$dir" && hg paths | grep default | sed 's/default = //'`;
		chop $remote;
	}
	else {
		print "$dir: unknown repository type\n";
		$errors++;
		next;
	}
	# check that repository source URL matches the one declared in mrconfig
	if ($remote eq '') {
		print "$dir: could not determine source URL\n";
		$errors++;
	}
	elsif ($repo ne $remote) {
		print "$dir: '$repo' != '$remote'\n";
		$errors++;
	}
}

# check actual repositories beneath code folder against .mrconfig entries
my @actualRepos =
	`find -H "$home/$codeFolder"/* -maxdepth 2 '(' -name '.git' -o -name '.hg' ')' -type d`;
for my $actualRepo (@actualRepos) {
	chop $actualRepo;
	$actualRepo =~ s/^$home\/(.*)\/\.(git|hg)$/\1/;
	if (not defined $repos{$actualRepo}) {
		print "[WARNING] $actualRepo: not in .mrconfig\n";
	}
}

exit $errors;
