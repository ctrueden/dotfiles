#!/usr/bin/perl

# dev-find - Searches existing POMs for <developer> and <contributor>
#            blocks matching the given criteria.
#            Use '--' to separate developer args from contributor args.
#
# Example:
# $ dev-find Arganda -- Longair

use strict;

##### Variables #####

my $debug = 0;

my $baseDir = "$ENV{HOME}/code";

my @dirs = split(/ /,
	"scijava imagej scifio fiji fiji-ext bdv trakem2 big imagescience");

##### Harvest the developers and contributors #####

my %devBlocks, my %ctrBlocks;

my $pomsCmd = 'grep -l founder ';
for my $dir (@dirs) { $pomsCmd .= " $baseDir/$dir/*/pom.xml"; }
my @poms = `$pomsCmd`;

for my $pom (@poms) {
	# Read the developers and contributors
	chomp $pom;

	# Filter to only <developers>...</developers>
	my @devLines = `grep -A 10000 "^\t<developers>\$" "$pom" | grep -B 10000 "^\t<\/developers>\$"`;
	my @ctrLines = `grep -A 10000 "^\t<contributors>\$" "$pom" | grep -B 10000 "^\t<\/contributors>\$"`;
	my @lines = (@devLines, @ctrLines);

	my $name = '', my $block = '';
	for my $line (@lines) {
		if ($line =~ /<developer>/ || $line =~ /<contributor>/) {
			$name = $block = '';
		}

		if ($line =~ /<name>.*<\/name>/) {
			$name = $line;
			$name =~ s/.*<name>(.*)<\/name>.*/\1/;
			chomp $name;
		}

		if ($line =~ /<\/developer>$/) {
			# end developer block
			$block .= $line;
			# write out the block
			if ($devBlocks{$name} ne '' && $devBlocks{$name} ne $block) {
				print STDERR "[WARNING] Developer '$name' POM mismatch! $pom\n";
			}
			elsif ($debug) {
				print STDERR "[DEBUG] Developer '$name' gleaned from POM: $pom\n";
			}
			$devBlocks{$name} = $block;
			next;
		}
		if ($line =~ /<\/contributor>$/) {
			# end contributor block
			$block .= $line;
			# write out the block
			if ($ctrBlocks{$name} ne '' && $ctrBlocks{$name} ne $block) {
				print STDERR "[WARNING] Contributor '$name' POM mismatch! $pom\n";
			}
			elsif ($debug) {
				print STDERR "[DEBUG] Contributor '$name' gleaned from POM: $pom\n";
			}
			$ctrBlocks{$name} = $block;
			next;
		}

		# append to XML block
		if ($line !~ /<role>.*<\/role>/) { # Do not record the roles
			$block .= $line;
		}
	}

}

##### Parse the Person template #####

my @persons = `curl -fs 'http://imagej.net/index.php?title=Template:Person&action=edit'`;
my %personURLs;
my %personIDs;
my $previousID = '';
my $gitHubSection = 0;
for my $person (@persons) {
	chomp $person;
	if ($person =~ /^\|\s*([^\s]+)\s*=\s*(.+?)\s*$/) {
		my $id = $1;
		my $url = $2;
		$url =~ s/\{\{\{1\}\}\}/$id/;
		my $name = '';
		if ($url =~ /^\[\[User:.*\|(.*)\]\]$/) { $name = $1; }
		elsif ($url =~ /^\[http[^\s]*\s+(.*)\]$/) { $name = $1; }
		elsif ($url =~ /^\[\[(.*)\]\]$/) { $name = $1; }
		# Convert URL wiki markup to pure URLs
		$url =~ s/^\[\[([^|]*)(\|.*)?\]\]$/http:\/\/imagej.net\/\1/;
		$url =~ s/^\[([^\s]*)\s+.*\]$/\1/;
		$url =~ s/ /_/g;

		if ($previousID ne 'Rasband' && $previousID gt $id) {
			# NB: GitHub IDs are listed second, in a new alphabetical order.
			# We only record GitHub IDs here, because they are what the POMs use.
			print STDERR "[INFO] First GitHub ID record: $id = $name\n";
			$gitHubSection = 1;
		}
		$previousID = $id;

		if ($gitHubSection) {
			# Record only GitHub IDs, not wiki IDs.
			$personIDs{$name} = $id;
		}
		else {
			# Record only wiki URLs, not GitHub URLs.
			if ($personURLs{$name} ne '' && $personURLs{$name} ne $url) {
				print STDERR "[WARNING] Person '$name' URL inconsistency: $personURLs{$name} != $url\n";
			}
			$personURLs{$name} = $url;
		}
	}
}
if (!@persons) {
	print STDERR "[WARNING] Person template is inaccessible. Skipping person checks.\n";
}

##### Cross-check XML blocks with Person template #####

for my $name (keys %devBlocks) {
	my $id = $devBlocks{$name};
	if ($id !~ s/.*<id>(.*)<\/id>.*/\1/s) { $id = ''; }
	my $url = $devBlocks{$name};
	if ($url !~ s/.*<url>(.*)<\/url>.*/\1/s) { $url = ''; }
	if (@persons && $personIDs{$name} ne $id) {
		print STDERR "[WARNING] Person/Developer '$name' ID mismatch: $personIDs{$name} != $id\n";
	}
	if (@persons && $personURLs{$name} ne $url) {
		print STDERR "[WARNING] Person/Developer '$name' URL mismatch: $personURLs{$name} != $url\n";
	}
}
for my $name (keys %ctrBlocks) {
	my $id = $ctrBlocks{$name};
	if ($id !~ s/.*<id>(.*)<\/id>.*/\1/s) { $id = ''; }
	my $url = $ctrBlocks{$name};
	if ($url !~ s/.*<url>(.*)<\/url>.*/\1/s) { $url = ''; }
	if (@persons && $personIDs{$name} ne $id) {
		print STDERR "[WARNING] Person/Contributor '$name' ID mismatch: $personIDs{$name} != $id\n";
	}
	if (@persons && $personURLs{$name} ne $url) {
		print STDERR "[WARNING] Person/Contributor '$name' URL mismatch: $personURLs{$name} != $url\n";
	}
}

##### Search for matches #####

my %hash = %devBlocks;
my $tag = "developers";
print "\t<$tag>\n";
for my $arg (@ARGV) {
	if ($arg eq '--') {
		print "\t</$tag>\n";
		%hash = %ctrBlocks;
		$tag = "contributors";
		print "\t<$tag>\n";
	}
	for my $name (keys %hash) {
		if ($name =~ /$arg/) {
			print "$hash{$name}";
		}
	}
}
print "\t</$tag>\n";
